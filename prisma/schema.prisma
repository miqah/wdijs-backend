generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WordType {
  N
  PN
  AN
  V1
  V5U
  VS
  ADJ_I
  ADJ_NA
  ADV
  CONJ
  INTERJ
  PRON
  SUFFIX
  PREFIX
  EXP
}

enum PracticeType {
  WORD
  SENTENCE
  CONVERSATION
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique()
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  userBots      UserBot[]
  userWords     UserWord[]
  sentences     UserSentence[]
  scheduleItems ScheduleItem[]

  @@map("users")
}

model ScheduleItem {
  id           Int          @id @default(autoincrement())
  userId       Int
  type         PracticeType
  nextReview   DateTime
  repetition   Int
  easeFactor   Float
  lastReviewed DateTime?

  user     User                  @relation(fields: [userId], references: [id])
  word     ScheduleItemWord?
  sentence ScheduleItemSentence?
  bot      ScheduleItemBot?

  @@map("schedule_items")
}

model ScheduleItemWord {
  id             Int @id @default(autoincrement())
  scheduleItemId Int @unique
  userWordId     Int @unique

  scheduleItem ScheduleItem @relation(fields: [scheduleItemId], references: [id])
  userWord     UserWord     @relation(fields: [userWordId], references: [id])
}

model ScheduleItemSentence {
  id             Int @id @default(autoincrement())
  scheduleItemId Int @unique
  userSentenceId Int @unique

  scheduleItem ScheduleItem @relation(fields: [scheduleItemId], references: [id])
  userSentence UserSentence @relation(fields: [userSentenceId], references: [id])
}

model ScheduleItemBot {
  id             Int @id @default(autoincrement())
  scheduleItemId Int @unique
  userBotId      Int @unique

  scheduleItem ScheduleItem @relation(fields: [scheduleItemId], references: [id])
  userBot      UserBot      @relation(fields: [userBotId], references: [id])
}

model Bot {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  basePrompt  String
  createdAt   DateTime  @default(now())
  userBots    UserBot[]

  @@map("bots")
}

model UserBot {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique()
  botId             Int
  nickname          String
  context           String
  friendshipLevel   Int      @default(1)
  friendshipContext String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  user            User             @relation(fields: [userId], references: [id])
  bot             Bot              @relation(fields: [botId], references: [id])
  ScheduleItemBot ScheduleItemBot?

  @@map("user_bots")
}

model LearningStage {
  id           Int        @id @default(autoincrement())
  stageName    String
  description  String?
  stayDuration Int
  interval     Int
  userWords    UserWord[]

  @@map("learning_stages")
}

model TestLevel {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  languageId  Int
  ranking     Int

  language Language @relation(fields: [languageId], references: [id])
  words    Word[]

  @@map("test_levels")
}

model UserWord {
  id              Int @id @default(autoincrement())
  userId          Int
  wordId          Int
  learningStageId Int

  user             User               @relation(fields: [userId], references: [id])
  word             Word               @relation(fields: [wordId], references: [id])
  learningStage    LearningStage      @relation(fields: [learningStageId], references: [id])
  ScheduleItemWord ScheduleItemWord?
  sentenceItems    UserSentenceItem[]

  @@map("user_words")
}

model UserSentence {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user                 User                  @relation(fields: [userId], references: [id])
  sentenceItems        UserSentenceItem[]
  ScheduleItemSentence ScheduleItemSentence?

  @@map("user_sentences")
}

model UserSentenceItem {
  id             Int  @id @default(autoincrement())
  userSentenceId Int
  orderIndex     Int
  userWordId     Int?
  particleId     Int?

  userSentence UserSentence @relation(fields: [userSentenceId], references: [id])
  userWord     UserWord?    @relation(fields: [userWordId], references: [id])
  particle     Particle?    @relation(fields: [particleId], references: [id])

  @@unique([userSentenceId, orderIndex])
  @@map("user_sentence_items")
}

model Language {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  words      Word[]
  testLevels TestLevel[]
  particles  Particle[]

  @@map("languages")
}

model Word {
  id          Int      @id @default(autoincrement())
  type        WordType
  languageId  Int
  testLevelId Int

  language  Language      @relation(fields: [languageId], references: [id])
  testLevel TestLevel     @relation(fields: [testLevelId], references: [id])
  kanjis    Kanji[]       @relation("KanjiWords")
  userWords UserWord[]
  writings  WordWriting[]
  readings  WordReading[]
  senses    WordSense[]

  @@map("words")
}

model WordReading {
  id     Int    @id @default(autoincrement())
  wordId Int
  value  String

  word Word @relation(fields: [wordId], references: [id])
}

model WordWriting {
  id     Int     @id @default(autoincrement())
  wordId Int
  text   String
  isKana Boolean

  word Word @relation(fields: [wordId], references: [id])

  @@unique([wordId, text])
  @@map("word_writings")
}

model WordSense {
  id      Int     @id @default(autoincrement())
  wordId  Int
  meaning String
  tags    String? // e.g., "common", "slang", or parts of speech

  word Word @relation(fields: [wordId], references: [id])

  @@map("word_senses")
}

model Particle {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  type        String
  languageId  Int

  language      Language           @relation(fields: [languageId], references: [id])
  sentenceItems UserSentenceItem[]

  @@map("particles")
}

model Kanji {
  id          Int     @id @default(autoincrement())
  character   String  @unique
  strokeCount Int?
  grade       Int?
  frequency   Int?
  jlptLevel   Int?
  imageUrl    String?

  onyomiReadings  KanjiOnyomi[]
  kunyomiReadings KanjiKunyomi[]
  nanoriReadings  KanjiNanori[]
  radicals        Radical[]      @relation("KanjiRadicals")
  words           Word[]         @relation("KanjiWords")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model KanjiOnyomi {
  id      Int    @id @default(autoincrement())
  reading String
  kanjiId Int
  kanji   Kanji  @relation(fields: [kanjiId], references: [id])

  @@unique([kanjiId, reading])
}

model KanjiKunyomi {
  id      Int    @id @default(autoincrement())
  reading String
  kanjiId Int
  kanji   Kanji  @relation(fields: [kanjiId], references: [id])

  @@unique([kanjiId, reading])
}

model KanjiNanori {
  id      Int    @id @default(autoincrement())
  reading String
  kanjiId Int
  kanji   Kanji  @relation(fields: [kanjiId], references: [id])

  @@unique([kanjiId, reading])
}

model Radical {
  id             Int     @id @default(autoincrement())
  symbol         String // Actual radical symbol (e.g. "æ°µ")
  name           String // Common English name (e.g. "water")
  nameRomaji     String? // Optional romaji (e.g. "sanzui")
  meaning        String
  strokeCount    Int?
  position       String? // Position info like "left", "top", etc. (optional)
  imageUrl       String?
  description    String?
  classification Int? // Radical number (e.g. 85 for "water")
  frequency      Int? // Optional: how common this radical is (if using)

  kanjis Kanji[] @relation("KanjiRadicals")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([symbol])
  @@map("radicals")
}
