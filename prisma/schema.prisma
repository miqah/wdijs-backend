generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WordType {
  // Nouns
  N           // Common noun
  N_ADV       // Adverbial noun
  N_T         // Temporal noun
  N_PREF      // Noun prefix
  N_SUF       // Noun suffix
  
  // Pronouns
  PN          // Pronoun
  
  // Verbs
  V1          // Ichidan verb
  V5B         // Godan verb with 'bu' ending
  V5G         // Godan verb with 'gu' ending
  V5K         // Godan verb with 'ku' ending
  V5M         // Godan verb with 'mu' ending
  V5N         // Godan verb with 'nu' ending
  V5R         // Godan verb with 'ru' ending
  V5S         // Godan verb with 'su' ending
  V5T         // Godan verb with 'tsu' ending
  V5U         // Godan verb with 'u' ending
  V5K_S       // Godan verb - Iku/Yuku special class
  VS          // Suru verb
  VS_S        // Special suru verb
  VS_I        // Irregular suru verb
  VK          // Kuru verb - special class
  VZ          // Zuru verb - special class
  VI          // Intransitive verb
  VT          // Transitive verb
  
  // Adjectives
  ADJ_I       // i-adjective
  ADJ_NA      // na-adjective
  ADJ_NO      // no-adjective
  ADJ_PN      // Pre-noun adjectival
  ADJ_T       // 'taru' adjective
  ADJ_F       // 'ku' adjective (archaic)
  
  // Adverbs
  ADV         // Adverb
  ADV_TO      // Adverb with 'to'
  
  // Others
  AUX         // Auxiliary
  AUX_V       // Auxiliary verb
  AUX_ADJ     // Auxiliary adjective
  CONJ        // Conjunction
  COOR        // Coordinate conjunction
  CTR         // Counter
  EXP         // Expression
  INT         // Interjection
  INTERJ      // Interjection (same as INT)
  PRT         // Particle
  PREF        // Prefix
  SUFFIX      // Suffix
  PROV        // Proverb
  
  // Unclassified/misc
  X           // Other/unclassified
}

enum PracticeType {
  WORD
  SENTENCE
  CONVERSATION
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique()
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  userBots      UserBot[]
  userWords     UserWord[]
  sentences     UserSentence[]
  scheduleItems ScheduleItem[]

  @@map("users")
}

model ScheduleItem {
  id           Int          @id @default(autoincrement())
  userId       Int
  type         PracticeType
  nextReview   DateTime
  repetition   Int
  easeFactor   Float
  lastReviewed DateTime?

  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  word     ScheduleItemWord?
  sentence ScheduleItemSentence?
  bot      ScheduleItemBot?

  @@index([userId])
  @@map("schedule_items")
}

model ScheduleItemWord {
  id             Int @id @default(autoincrement())
  scheduleItemId Int @unique
  userWordId     Int @unique

  scheduleItem ScheduleItem @relation(fields: [scheduleItemId], references: [id], onDelete: Cascade)
  userWord     UserWord     @relation(fields: [userWordId], references: [id], onDelete: Cascade)

  @@map("schedule_item_words")
}

model ScheduleItemBot {
  id             Int @id @default(autoincrement())
  scheduleItemId Int @unique
  userBotId      Int @unique

  scheduleItem ScheduleItem @relation(fields: [scheduleItemId], references: [id], onDelete: Cascade)
  userBot      UserBot      @relation(fields: [userBotId], references: [id], onDelete: Cascade)

  @@map("schedule_item_bots")
}

model Bot {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  basePrompt  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  userBots    UserBot[]

  @@map("bots")
}

model UserBot {
  id                Int      @id @default(autoincrement())
  userId            Int      
  botId             Int
  nickname          String
  context           String
  friendshipLevel   Int      @default(1)
  friendshipContext String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  bot             Bot              @relation(fields: [botId], references: [id])
  ScheduleItemBot ScheduleItemBot?

  @@index([userId])
  @@index([botId])
  @@map("user_bots")
}

model LearningStage {
  id           Int        @id @default(autoincrement())
  stageName    String
  description  String?
  stayDuration Int
  interval     Int
  userWords    UserWord[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()

  @@unique([stageName])
  @@map("learning_stages")
}

model TestLevel {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  languageId  Int
  ranking     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  language Language @relation(fields: [languageId], references: [id])
  words    Word[]

  @@unique([name, languageId])
  @@index([languageId])
  @@map("test_levels")
}

model UserWord {
  id              Int @id @default(autoincrement())
  userId          Int
  wordId          Int
  learningStageId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  word             Word               @relation(fields: [wordId], references: [id])
  learningStage    LearningStage      @relation(fields: [learningStageId], references: [id])
  ScheduleItemWord ScheduleItemWord?

  @@index([userId])
  @@index([wordId])
  @@index([learningStageId])
  @@map("user_words")
}

model UserSentence {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordOccurrences      SentenceWordOccurrence[] 
  ScheduleItemSentence ScheduleItemSentence?
  
  @@index([userId])
  @@map("user_sentences")
}

model ScheduleItemSentence {
  id             Int @id @default(autoincrement())
  scheduleItemId Int @unique
  sentenceId     Int @unique

  scheduleItem ScheduleItem @relation(fields: [scheduleItemId], references: [id], onDelete: Cascade)
  sentence     UserSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)

  @@map("schedule_item_sentences")
}


model SentenceWordOccurrence {
  id             Int  @id @default(autoincrement())
  sentenceId     Int
  wordId         Int
  orderIndex     Int  // Simple position in sentence (1st word, 2nd word, etc.)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
  
  sentence UserSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)
  word     Word         @relation(fields: [wordId], references: [id])
  
  @@unique([sentenceId, orderIndex]) // Ensure correct ordering
  @@index([sentenceId])
  @@index([wordId])
  @@map("sentence_word_occurrences")
}

  
model Language {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  words      Word[]
  testLevels TestLevel[]

  @@map("languages")
}

model Word {
  id          Int      @id @default(autoincrement())
  languageId  Int
  testLevelId Int?
  isCommon    Boolean  @default(false)
  priority    Int?
  entSeq      Int? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  language  Language      @relation(fields: [languageId], references: [id])
  testLevel TestLevel?    @relation(fields: [testLevelId], references: [id])
  userWords UserWord[]
  sentenceOccurrences SentenceWordOccurrence[] 
  writings  WordWriting[]
  readings  WordReading[]
  senses    WordSense[]

  @@index([languageId])
  @@index([testLevelId])
  @@index([isCommon])
  @@map("words")
}

model WordReading {
  id        Int      @id @default(autoincrement())
  wordId    Int
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@index([wordId])
  @@index([value])
  @@map("word_readings")
}

model WordWriting {
  id        Int      @id @default(autoincrement())
  wordId    Int
  text      String
  isKana    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)
  kanjiUsages KanjiInWriting[]
  

  @@unique([wordId, text])
  @@index([wordId])
  @@index([text])
  @@map("word_writings")
}

model WordSense {
  id             Int       @id @default(autoincrement())
  wordId         Int
  partOfSpeech   WordType
  originalPosTag String?   
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt()
  
  word           Word            @relation(fields: [wordId], references: [id], onDelete: Cascade)
  englishGlosses EnglishGloss[]
  
  @@index([wordId])
  @@index([partOfSpeech])
  @@map("word_senses")
}

model EnglishGloss {
  id          Int       @id @default(autoincrement())
  wordSenseId Int
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  
  wordSense   WordSense @relation(fields: [wordSenseId], references: [id], onDelete: Cascade)
  
  @@index([wordSenseId])
  @@index([text])
  @@map("english_glosses")
}

model Kanji {
  id          Int       @id @default(autoincrement())
  character   String    @unique
  strokeCount Int?
  grade       Int?
  frequency   Int?
  jlptLevel   Int?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()

  onyomiReadings  KanjiOnyomi[]
  kunyomiReadings KanjiKunyomi[]
  nanoriReadings  KanjiNanori[]
  radicals        Radical[]      @relation("kanji_radicals")
  writingUsages KanjiInWriting[] 

  @@index([jlptLevel])
  @@index([grade])

  @@map("kanji")
}

model KanjiInWriting {
  id          Int         @id @default(autoincrement())
  writingId   Int
  kanjiId     Int
  position    Int         
  
  writing     WordWriting @relation(fields: [writingId], references: [id], onDelete: Cascade)
  kanji       Kanji       @relation(fields: [kanjiId], references: [id])
  
  @@unique([writingId, position])
  @@index([kanjiId])
  @@map("kanji_in_writings")

}

model KanjiOnyomi {
  id        Int      @id @default(autoincrement())
  reading   String
  kanjiId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  
  kanji     Kanji    @relation(fields: [kanjiId], references: [id], onDelete: Cascade)

  @@unique([kanjiId, reading])
  @@index([kanjiId])
  @@map("kanji_onyomi")
}

model KanjiKunyomi {
  id        Int      @id @default(autoincrement())
  reading   String
  kanjiId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  
  kanji     Kanji    @relation(fields: [kanjiId], references: [id], onDelete: Cascade)

  @@unique([kanjiId, reading])
  @@index([kanjiId])
  @@map("kanji_kunyomi")
}

model KanjiNanori {
  id        Int      @id @default(autoincrement())
  reading   String
  kanjiId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  
  kanji     Kanji    @relation(fields: [kanjiId], references: [id], onDelete: Cascade)

  @@unique([kanjiId, reading])
  @@index([kanjiId])
  @@map("kanji_nanori")
}

model Radical {
  id             Int       @id @default(autoincrement())
  symbol         String    // Actual radical symbol (e.g. "氵")
  name           String    // Common English name (e.g. "water")
  nameRomaji     String?   // Optional romaji (e.g. "sanzui")
  meaning        String
  strokeCount    Int?
  position       String?   // Position info like "left", "top", etc. (optional)
  imageUrl       String?
  description    String?
  classification Int?      // Radical number (e.g. 85 for "water")
  frequency      Int?      // Optional: how common this radical is (if using)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt()

  kanjis Kanji[] @relation("kanji_radicals")

  @@unique([symbol])
  @@index([strokeCount])
  @@map("radicals")
}